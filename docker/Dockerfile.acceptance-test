# Multi-stage build for optimized test images
# This Dockerfile creates containers specifically for running acceptance tests in CI/CD

# Stage 1: Base runtime image
FROM python:3.10-slim as base

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy and install base requirements
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Stage 2: Application image
FROM base as app

# Copy application source code
COPY libs/ libs/
COPY services/ services/
COPY config/ config/
COPY scripts/ scripts/

# Install the application packages
RUN pip install -e libs/event_bus_framework/
RUN pip install -e services/input-service/

# Stage 3: Test dependencies
FROM app as test

# Copy test requirements and install test dependencies
COPY tests/requirements.txt tests/requirements.txt
RUN pip install --no-cache-dir -r tests/requirements.txt

# Install additional CI/CD testing tools
RUN pip install \
    pytest-html \
    pytest-cov \
    pytest-xdist \
    pytest-timeout \
    psutil \
    aiohttp \
    docker

# Copy all test files
COPY tests/ tests/

# Stage 4: Acceptance test runner
FROM test as acceptance-test

# Set environment variables for CI/CD
ENV PYTHONPATH=/app
ENV TEST_ENVIRONMENT=ci
ENV PYTHONUNBUFFERED=1
ENV CI=true

# Create directories for test results
RUN mkdir -p /app/test-results /app/coverage-reports

# Set up test configuration
ENV SKIP_UNIT_TESTS=true
ENV SKIP_INTEGRATION_TESTS=true
ENV PYTEST_CURRENT_TEST=""

# Copy scripts for test execution
COPY scripts/run_container_acceptance_tests.sh /app/scripts/
RUN chmod +x /app/scripts/run_container_acceptance_tests.sh

# Health check to verify the test environment
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import pytest; import docker; import redis; print('Test environment ready')" || exit 1

# Default command runs all acceptance tests
CMD ["python", "-m", "pytest", "tests/acceptance/", \
     "-v", \
     "--junitxml=/app/test-results/acceptance.xml", \
     "--html=/app/test-results/acceptance.html", \
     "--self-contained-html", \
     "--tb=short", \
     "--maxfail=10", \
     "--timeout=300"]

# Labels for container metadata
LABEL org.opencontainers.image.title="AI-RE Acceptance Test Runner"
LABEL org.opencontainers.image.description="Container for running AI-RE acceptance tests in CI/CD"
LABEL org.opencontainers.image.vendor="AI-RE Team"
LABEL org.opencontainers.image.version="1.0.0" 